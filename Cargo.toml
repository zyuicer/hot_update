[workspace]
members = ["crates/*"]
resolver = "2"

[workspace.package]
edition = "2021"
version = "0.0.0"

[profile.release-debug]
debug = true
inherits = "release"


[workspace.lints.clippy]
# Guidelines
# - We should only disable rules globally if they are either false positives, chaotic, or does not make sense.
# - Group are enabled with priority -1, so we could easily override some specific rules.
#   - https://doc.rust-lang.org/stable/cargo/reference/manifest.html#the-lints-section

# --- restriction https://doc.rust-lang.org/clippy/usage.html#clippyrestriction
dbg_macro = "deny"
print_stdout = "deny"

# I like the explicitness of this rule as it removes confusion around `clone`.
# This increases readability, avoids `clone` mindlessly and heap allocating on accident.
clone_on_ref_ptr = "deny"
empty_drop = "deny"
exit = "deny"
filetype_is_file = "deny"
get_unwrap = "deny"
rc_buffer = "deny"
rc_mutex = "deny"
rest_pat_in_fully_bound_structs = "deny"
unnecessary_safety_comment = "deny"

# --- pedantic #https://doc.rust-lang.org/clippy/usage.html#clippypedantic
# To write the best rust code, pedantic group is enabled by default.
pedantic = { level = "deny", priority = -1 }

# Wizards, naming is too hard.
module_inception = "allow"
module_name_repetitions = "allow"
similar_names = "allow"

# Forwarding `Result` is a common pattern, this rule is too pedantic.
missing_errors_doc = "allow"

# #[must_use] is creating too much noise for this codebase, it does not add much value except nagging
# the programmer to add a #[must_use] after clippy has been run.
# Having #[must_use] everywhere also hinders readability.
must_use_candidate = "allow"

doc_markdown = "allow"
missing_const_for_fn = "allow"
needless_for_each = "allow"
new_without_default = "allow"
# TODO: should review this rule.
missing_panics_doc = "allow"

# Order doesn't really matter https://rust-lang.github.io/rust-clippy/master/index.html#/inconsistent_struct_constructor
inconsistent_struct_constructor = "allow"

# Single match is equally readable as if/else. https://rust-lang.github.io/rust-clippy/master/index.html#/single_match
single_match = "allow"
single_match_else = "allow"

[workspace.dependencies]
hot_update_utils = { path = "./crates/utils" }
# Default enable napi4 feature, see https://nodejs.org/api/n-api.html#node-api-version-matrix
serde_json = "1.0.132"
napi = { version = "3.0.0-alpha.19", default-features = false, features = [
  "napi4",
  "anyhow",
  "async",
] }
bsdiff = "0.2.0"
anyhow = "1.0.92"
serde = { version = "1.0.214", features = ["derive"] }
napi-derive = { version = "3.0.0-alpha.17", default-features = false, features = [
  "type-def",
] }
napi-build = "2.1.3"
derivative = "2.2.0"
tower-http = { version = "0.6.2", features = ["full"] }
axum = { version = "0.8.0-alpha.1", features = [
  "form",
  "http1",
  "json",
  "macros",
  "matched-path",
  "multipart",
  "original-uri",
  "query",
  "tokio",
  "tower-log",
] }
reqwest = { version = "0.12.9", default-features = true, features = ["json"] }
sqlx = { version = "0.8.2", features = [
  "runtime-tokio",
  "postgres",
  "derive",
  "json",
  "any",
  "migrate",
  "macros",
  "uuid",
  "tls-native-tls",
] }
hyper = "1.5.1"
tokio = { version = "1.41.1", features = [
  "full",
  "fs",
  "io-util",
  "io-std",
  "macros",
  "net",
  "process",
  "rt",
  "rt-multi-thread",
  "signal",
  "time",
  "test-util",
  "tracing",
] }
uuid = { version = "1.11.0", features = ["v4", "serde"] }
jsonwebtoken = "9.3.0"
config = "0.14.1"
chrono = "0.4.38"
bytes = "1.8.0"
thiserror = "2"

[profile.release]
lto = true
strip = "symbols"
